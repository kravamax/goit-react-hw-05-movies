{"version":3,"file":"static/js/411.c8556990.chunk.js","mappings":"oOA2CA,EAxCa,SAAC,GAAyB,IAAvBA,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACrB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,WACRD,EAASJ,KACR,CAACA,IAiBJ,OACE,kBAAMM,SAZa,SAAAC,GACnBA,EAAMC,iBAENP,EAAS,CAAEQ,OAAQN,IAEL,KAAVH,GACFU,MAAM,gCAMR,WACE,kBACEC,KAAK,OACLC,KAAK,QACLC,MAAOV,GAAS,GAChBW,SArBgB,SAAAP,GACpBH,EAASG,EAAMQ,OAAOF,WAsBpB,mBAAQF,KAAK,SAAb,wBC5BAK,GAAaC,EAAAA,EAAAA,OAAK,kBAAM,gCA6B9B,EA3BmB,WACjB,OAA4Bf,EAAAA,EAAAA,UAAS,IAArC,eAAOgB,EAAP,KAAeC,EAAf,KAEA,GAA4BC,EAAAA,EAAAA,MAA5B,eAAOX,EAAP,KAAeY,EAAf,KACMrB,EAAQS,EAAOa,IAAI,UAazB,OAXAjB,EAAAA,EAAAA,YAAU,WACM,OAAVL,GAEJuB,EAAAA,GAAgCvB,GAAOwB,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QAC7C,IAAKA,EAAQC,OACX,OAAOhB,MAAM,yBAEfS,EAAUM,QAEX,CAACzB,KAGF,iCACE,SAAC,EAAD,CAAMA,MAAOA,EAAOC,SAAUoB,KAC9B,SAAC,EAAAM,SAAD,CAAUC,UAAU,8CAApB,SACGV,IAAU,SAACF,EAAD,CAAYE,OAAQA,W,oLC5BjCW,EAAW,+BACXC,EAAU,mCAAhB,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,IACd,OAAOV,EAAuB,GAAD,OACxBF,EADwB,uCACeC,IAIvC,SAASY,EAAkBC,GAChC,OAAOZ,EAAuB,GAAD,OACxBF,EADwB,kBACNc,EADM,oBACab,IAIrC,SAASc,EAAeD,GAC7B,OAAOZ,EAAuB,GAAD,OACxBF,EADwB,kBACNc,EADM,4BACqBb,EADrB,oBAKxB,SAASe,EAAkBF,GAChC,OAAOZ,EAAuB,GAAD,OACxBF,EADwB,kBACNc,EADM,4BACqBb,EADrB,2BAKxB,SAASgB,EAAiB9C,GAC/B,OAAO+B,EAAuB,GAAD,OACxBF,EADwB,iCACSC,EADT,iCACyC9B,EADzC","sources":["components/Form/Form.jsx","pages/MoviesPage.jsx","services/movies-api.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\n\nconst Form = ({ query, onSearch }) => {\n  const [input, setInput] = useState('');\n\n  useEffect(() => {\n    setInput(query);\n  }, [query]);\n\n  const onChangeInput = event => {\n    setInput(event.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    onSearch({ search: input });\n\n    if (query === '') {\n      alert('You have to write something');\n      return;\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        name=\"input\"\n        value={input || ''}\n        onChange={onChangeInput}\n      />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nForm.propTypes = {\n  query: PropTypes.string,\n  onSearch: PropTypes.func.isRequired,\n};\n\nexport default Form;\n","import { useState, useEffect, lazy, Suspense } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport * as moviesFetchAPI from '../services/movies-api';\nimport Form from '../components/Form';\nconst MoviesList = lazy(() => import('../components/MoviesList'));\n\nconst MoviesPage = () => {\n  const [movies, setMovies] = useState([]);\n\n  const [search, setSearch] = useSearchParams();\n  const query = search.get('search');\n\n  useEffect(() => {\n    if (query === null) return;\n\n    moviesFetchAPI.fetchMoviesQuery(query).then(({ results }) => {\n      if (!results.length) {\n        return alert('Not found anything :(');\n      }\n      setMovies(results);\n    });\n  }, [query]);\n\n  return (\n    <>\n      <Form query={query} onSearch={setSearch} />\n      <Suspense fallback={<h2>Loading movies...</h2>}>\n        {movies && <MoviesList movies={movies} />}\n      </Suspense>\n    </>\n  );\n};\n\nexport default MoviesPage;\n","const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '296d44092a8a94dcab4a4c4bb6b7444f';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchTrendMovies() {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n}\n\nexport function fetchMovieDetails(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n  );\n}\n\nexport function fetchMovieCast(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport function fetchMovieReviews(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n}\n\nexport function fetchMoviesQuery(query) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n}\n"],"names":["query","onSearch","useState","input","setInput","useEffect","onSubmit","event","preventDefault","search","alert","type","name","value","onChange","target","MoviesList","lazy","movies","setMovies","useSearchParams","setSearch","get","moviesFetchAPI","then","results","length","Suspense","fallback","BASE_URL","API_KEY","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","fetchTrendMovies","fetchMovieDetails","movieId","fetchMovieCast","fetchMovieReviews","fetchMoviesQuery"],"sourceRoot":""}